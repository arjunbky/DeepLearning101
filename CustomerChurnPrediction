{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1481789,"sourceType":"datasetVersion","datasetId":869651}],"dockerImageVersionId":30170,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-03T21:08:30.758748Z","iopub.execute_input":"2024-06-03T21:08:30.759144Z","iopub.status.idle":"2024-06-03T21:08:30.799050Z","shell.execute_reply.started":"2024-06-03T21:08:30.759037Z","shell.execute_reply":"2024-06-03T21:08:30.798064Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/credit-card-customer-churn-prediction/Churn_Modelling.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/credit-card-customer-churn-prediction/Churn_Modelling.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.800928Z","iopub.execute_input":"2024-06-03T21:08:30.801323Z","iopub.status.idle":"2024-06-03T21:08:30.849154Z","shell.execute_reply.started":"2024-06-03T21:08:30.801276Z","shell.execute_reply":"2024-06-03T21:08:30.848288Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.850507Z","iopub.execute_input":"2024-06-03T21:08:30.850845Z","iopub.status.idle":"2024-06-03T21:08:30.878204Z","shell.execute_reply.started":"2024-06-03T21:08:30.850802Z","shell.execute_reply":"2024-06-03T21:08:30.877307Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n3       1       0.00              2          0               0   \n4       2  125510.82              1          1               1   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  \n3         93826.63       0  \n4         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.drop(columns = ['RowNumber','CustomerId','Surname'],inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.880737Z","iopub.execute_input":"2024-06-03T21:08:30.881356Z","iopub.status.idle":"2024-06-03T21:08:30.893280Z","shell.execute_reply.started":"2024-06-03T21:08:30.881297Z","shell.execute_reply":"2024-06-03T21:08:30.892308Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.894487Z","iopub.execute_input":"2024-06-03T21:08:30.894744Z","iopub.status.idle":"2024-06-03T21:08:30.926162Z","shell.execute_reply.started":"2024-06-03T21:08:30.894705Z","shell.execute_reply":"2024-06-03T21:08:30.925286Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 11 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   CreditScore      10000 non-null  int64  \n 1   Geography        10000 non-null  object \n 2   Gender           10000 non-null  object \n 3   Age              10000 non-null  int64  \n 4   Tenure           10000 non-null  int64  \n 5   Balance          10000 non-null  float64\n 6   NumOfProducts    10000 non-null  int64  \n 7   HasCrCard        10000 non-null  int64  \n 8   IsActiveMember   10000 non-null  int64  \n 9   EstimatedSalary  10000 non-null  float64\n 10  Exited           10000 non-null  int64  \ndtypes: float64(2), int64(7), object(2)\nmemory usage: 859.5+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.927385Z","iopub.execute_input":"2024-06-03T21:08:30.927641Z","iopub.status.idle":"2024-06-03T21:08:30.944795Z","shell.execute_reply.started":"2024-06-03T21:08:30.927608Z","shell.execute_reply":"2024-06-03T21:08:30.943661Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.945969Z","iopub.execute_input":"2024-06-03T21:08:30.946277Z","iopub.status.idle":"2024-06-03T21:08:30.963064Z","shell.execute_reply.started":"2024-06-03T21:08:30.946186Z","shell.execute_reply":"2024-06-03T21:08:30.962130Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   CreditScore Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619    France  Female   42       2       0.00              1   \n1          608     Spain  Female   41       1   83807.86              1   \n2          502    France  Female   42       8  159660.80              3   \n3          699    France  Female   39       1       0.00              2   \n4          850     Spain  Female   43       2  125510.82              1   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  \n3          0               0         93826.63       0  \n4          1               1         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['Geography'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.964198Z","iopub.execute_input":"2024-06-03T21:08:30.964492Z","iopub.status.idle":"2024-06-03T21:08:30.979814Z","shell.execute_reply.started":"2024-06-03T21:08:30.964444Z","shell.execute_reply":"2024-06-03T21:08:30.978798Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"France     5014\nGermany    2509\nSpain      2477\nName: Geography, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['Gender'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:30.981441Z","iopub.execute_input":"2024-06-03T21:08:30.982164Z","iopub.status.idle":"2024-06-03T21:08:30.997788Z","shell.execute_reply.started":"2024-06-03T21:08:30.982116Z","shell.execute_reply":"2024-06-03T21:08:30.996492Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"Male      5457\nFemale    4543\nName: Gender, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df = pd.get_dummies(df,columns=['Geography','Gender'],drop_first=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:31.001396Z","iopub.execute_input":"2024-06-03T21:08:31.001722Z","iopub.status.idle":"2024-06-03T21:08:31.018965Z","shell.execute_reply.started":"2024-06-03T21:08:31.001673Z","shell.execute_reply":"2024-06-03T21:08:31.018107Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:31.020129Z","iopub.execute_input":"2024-06-03T21:08:31.020374Z","iopub.status.idle":"2024-06-03T21:08:31.036411Z","shell.execute_reply.started":"2024-06-03T21:08:31.020344Z","shell.execute_reply":"2024-06-03T21:08:31.035423Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   CreditScore  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n0          619   42       2       0.00              1          1   \n1          608   41       1   83807.86              1          0   \n2          502   42       8  159660.80              3          1   \n3          699   39       1       0.00              2          0   \n4          850   43       2  125510.82              1          1   \n\n   IsActiveMember  EstimatedSalary  Exited  Geography_Germany  \\\n0               1        101348.88       1                  0   \n1               1        112542.58       0                  0   \n2               0        113931.57       1                  0   \n3               0         93826.63       0                  0   \n4               1         79084.10       0                  0   \n\n   Geography_Spain  Gender_Male  \n0                0            0  \n1                1            0  \n2                0            0  \n3                0            0  \n4                1            0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n      <th>Geography_Germany</th>\n      <th>Geography_Spain</th>\n      <th>Gender_Male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>699</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>850</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = df.drop(columns=['Exited'])\ny = df['Exited'].values\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:31.037421Z","iopub.execute_input":"2024-06-03T21:08:31.037663Z","iopub.status.idle":"2024-06-03T21:08:32.172872Z","shell.execute_reply.started":"2024-06-03T21:08:31.037633Z","shell.execute_reply":"2024-06-03T21:08:32.171895Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX_train_trf = scaler.fit_transform(X_train)\nX_test_trf = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:32.174185Z","iopub.execute_input":"2024-06-03T21:08:32.174529Z","iopub.status.idle":"2024-06-03T21:08:32.190451Z","shell.execute_reply.started":"2024-06-03T21:08:32.174487Z","shell.execute_reply":"2024-06-03T21:08:32.189391Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"import tensorflow\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential \nfrom tensorflow.keras.layers import Dense","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:32.191697Z","iopub.execute_input":"2024-06-03T21:08:32.191960Z","iopub.status.idle":"2024-06-03T21:08:38.804216Z","shell.execute_reply.started":"2024-06-03T21:08:32.191927Z","shell.execute_reply":"2024-06-03T21:08:38.803388Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"model = Sequential()\n\nmodel.add(Dense(11,activation='sigmoid',input_dim=11))\nmodel.add(Dense(11,activation='sigmoid'))\nmodel.add(Dense(1,activation='sigmoid'))","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:38.805469Z","iopub.execute_input":"2024-06-03T21:08:38.805735Z","iopub.status.idle":"2024-06-03T21:08:38.928235Z","shell.execute_reply.started":"2024-06-03T21:08:38.805702Z","shell.execute_reply":"2024-06-03T21:08:38.927402Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:38.929249Z","iopub.execute_input":"2024-06-03T21:08:38.929522Z","iopub.status.idle":"2024-06-03T21:08:38.937771Z","shell.execute_reply.started":"2024-06-03T21:08:38.929488Z","shell.execute_reply":"2024-06-03T21:08:38.936738Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Model: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense (Dense)                (None, 11)                132       \n_________________________________________________________________\ndense_1 (Dense)              (None, 11)                132       \n_________________________________________________________________\ndense_2 (Dense)              (None, 1)                 12        \n=================================================================\nTotal params: 276\nTrainable params: 276\nNon-trainable params: 0\n_________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"model.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:38.939082Z","iopub.execute_input":"2024-06-03T21:08:38.939433Z","iopub.status.idle":"2024-06-03T21:08:38.959779Z","shell.execute_reply.started":"2024-06-03T21:08:38.939396Z","shell.execute_reply":"2024-06-03T21:08:38.958576Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"history = model.fit(X_train,y_train,batch_size=50,epochs=100,verbose=1,validation_split=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:08:38.961191Z","iopub.execute_input":"2024-06-03T21:08:38.961549Z","iopub.status.idle":"2024-06-03T21:09:07.437606Z","shell.execute_reply.started":"2024-06-03T21:08:38.961507Z","shell.execute_reply":"2024-06-03T21:09:07.436640Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Epoch 1/100\n128/128 [==============================] - 1s 4ms/step - loss: 0.5908 - accuracy: 0.7484 - val_loss: 0.5197 - val_accuracy: 0.7969\nEpoch 2/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5094 - accuracy: 0.7958 - val_loss: 0.5034 - val_accuracy: 0.7969\nEpoch 3/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5056 - accuracy: 0.7958 - val_loss: 0.5021 - val_accuracy: 0.7969\nEpoch 4/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5049 - accuracy: 0.7958 - val_loss: 0.5016 - val_accuracy: 0.7969\nEpoch 5/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5050 - accuracy: 0.7958 - val_loss: 0.5013 - val_accuracy: 0.7969\nEpoch 6/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5049 - accuracy: 0.7958 - val_loss: 0.5007 - val_accuracy: 0.7969\nEpoch 7/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5002 - val_accuracy: 0.7969\nEpoch 8/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5041 - accuracy: 0.7958 - val_loss: 0.4999 - val_accuracy: 0.7969\nEpoch 9/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5037 - accuracy: 0.7958 - val_loss: 0.4995 - val_accuracy: 0.7969\nEpoch 10/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5034 - accuracy: 0.7958 - val_loss: 0.4990 - val_accuracy: 0.7969\nEpoch 11/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5031 - accuracy: 0.7958 - val_loss: 0.4989 - val_accuracy: 0.7969\nEpoch 12/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5035 - accuracy: 0.7958 - val_loss: 0.5001 - val_accuracy: 0.7969\nEpoch 13/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.4996 - val_accuracy: 0.7969\nEpoch 14/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5037 - accuracy: 0.7958 - val_loss: 0.5003 - val_accuracy: 0.7969\nEpoch 15/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5005 - val_accuracy: 0.7969\nEpoch 16/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5050 - accuracy: 0.7958 - val_loss: 0.5003 - val_accuracy: 0.7969\nEpoch 17/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5003 - val_accuracy: 0.7969\nEpoch 18/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5005 - val_accuracy: 0.7969\nEpoch 19/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 20/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5007 - val_accuracy: 0.7969\nEpoch 21/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5048 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 22/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5048 - accuracy: 0.7958 - val_loss: 0.5008 - val_accuracy: 0.7969\nEpoch 23/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5046 - accuracy: 0.7958 - val_loss: 0.5008 - val_accuracy: 0.7969\nEpoch 24/100\n128/128 [==============================] - 0s 3ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5007 - val_accuracy: 0.7969\nEpoch 25/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5005 - val_accuracy: 0.7969\nEpoch 26/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5006 - val_accuracy: 0.7969\nEpoch 27/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5048 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 28/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 29/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 30/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5013 - val_accuracy: 0.7969\nEpoch 31/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 32/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5047 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 33/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5046 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 34/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 35/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5019 - val_accuracy: 0.7969\nEpoch 36/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5046 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 37/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5014 - val_accuracy: 0.7969\nEpoch 38/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 39/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 40/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 41/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 42/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 43/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5046 - accuracy: 0.7958 - val_loss: 0.5003 - val_accuracy: 0.7969\nEpoch 44/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5007 - val_accuracy: 0.7969\nEpoch 45/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 46/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5046 - accuracy: 0.7958 - val_loss: 0.5018 - val_accuracy: 0.7969\nEpoch 47/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5046 - accuracy: 0.7958 - val_loss: 0.5014 - val_accuracy: 0.7969\nEpoch 48/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5048 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 49/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5013 - val_accuracy: 0.7969\nEpoch 50/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5008 - val_accuracy: 0.7969\nEpoch 51/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5008 - val_accuracy: 0.7969\nEpoch 52/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 53/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 54/100\n128/128 [==============================] - 0s 4ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 55/100\n128/128 [==============================] - 0s 3ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 56/100\n128/128 [==============================] - 0s 3ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 57/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 58/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 59/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 60/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 61/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 62/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 63/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 64/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 65/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 66/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 67/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 68/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 69/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 70/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 71/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 72/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5042 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 73/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 74/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 75/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5013 - val_accuracy: 0.7969\nEpoch 76/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 77/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 78/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 79/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5011 - val_accuracy: 0.7969\nEpoch 80/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 81/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 82/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 83/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 84/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 85/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 86/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 87/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 88/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 89/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 90/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 91/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 92/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5045 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 93/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 94/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 95/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5012 - val_accuracy: 0.7969\nEpoch 96/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 97/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 98/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5044 - accuracy: 0.7958 - val_loss: 0.5009 - val_accuracy: 0.7969\nEpoch 99/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5043 - accuracy: 0.7958 - val_loss: 0.5010 - val_accuracy: 0.7969\nEpoch 100/100\n128/128 [==============================] - 0s 2ms/step - loss: 0.5042 - accuracy: 0.7958 - val_loss: 0.5016 - val_accuracy: 0.7969\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:09:07.439208Z","iopub.execute_input":"2024-06-03T21:09:07.440068Z","iopub.status.idle":"2024-06-03T21:09:07.659252Z","shell.execute_reply.started":"2024-06-03T21:09:07.440016Z","shell.execute_reply":"2024-06-03T21:09:07.658337Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:09:07.660651Z","iopub.execute_input":"2024-06-03T21:09:07.660915Z","iopub.status.idle":"2024-06-03T21:09:07.669468Z","shell.execute_reply.started":"2024-06-03T21:09:07.660881Z","shell.execute_reply":"2024-06-03T21:09:07.668536Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"array([[0.19800562],\n       [0.19800562],\n       [0.2369445 ],\n       ...,\n       [0.26039147],\n       [0.25341004],\n       [0.19800562]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"y_pred = y_pred.argmax(axis=-1)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:09:07.672379Z","iopub.execute_input":"2024-06-03T21:09:07.672660Z","iopub.status.idle":"2024-06-03T21:09:07.681038Z","shell.execute_reply.started":"2024-06-03T21:09:07.672626Z","shell.execute_reply":"2024-06-03T21:09:07.680212Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:09:07.682365Z","iopub.execute_input":"2024-06-03T21:09:07.682636Z","iopub.status.idle":"2024-06-03T21:09:07.697687Z","shell.execute_reply.started":"2024-06-03T21:09:07.682601Z","shell.execute_reply":"2024-06-03T21:09:07.696767Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"0.7975"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:09:07.699267Z","iopub.execute_input":"2024-06-03T21:09:07.699651Z","iopub.status.idle":"2024-06-03T21:09:07.902741Z","shell.execute_reply.started":"2024-06-03T21:09:07.699596Z","shell.execute_reply":"2024-06-03T21:09:07.901794Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7be0783d8750>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-06-03T21:09:07.904277Z","iopub.execute_input":"2024-06-03T21:09:07.905017Z","iopub.status.idle":"2024-06-03T21:09:08.068152Z","shell.execute_reply.started":"2024-06-03T21:09:07.904966Z","shell.execute_reply":"2024-06-03T21:09:08.067107Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7be0988ce810>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}